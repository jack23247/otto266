/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.4 */

#ifndef PB_OTTO_PROTO_OTTO_COMMUNICATION_PB_H_INCLUDED
#define PB_OTTO_PROTO_OTTO_COMMUNICATION_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _ConfigCommand {
    float left_kp;
    float left_ki;
    float left_kd;
    float right_kp;
    float right_ki;
    float right_kd;
    float cross_kp;
    float cross_ki;
    float cross_kd;
    float baseline;
    uint32_t ticks_per_revolution;
    float right_wheel_circumference;
    float left_wheel_circumference;
} ConfigCommand;

typedef struct _StatusMessage {
    float linear_velocity;
    float angular_velocity;
    uint32_t delta_millis;
    uint32_t status;
} StatusMessage;

typedef struct _VelocityCommand {
    float linear_velocity;
    float angular_velocity;
} VelocityCommand;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define StatusMessage_init_default               {0, 0, 0, 0}
#define ConfigCommand_init_default               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define VelocityCommand_init_default             {0, 0}
#define StatusMessage_init_zero                  {0, 0, 0, 0}
#define ConfigCommand_init_zero                  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define VelocityCommand_init_zero                {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ConfigCommand_left_kp_tag                1
#define ConfigCommand_left_ki_tag                2
#define ConfigCommand_left_kd_tag                3
#define ConfigCommand_right_kp_tag               4
#define ConfigCommand_right_ki_tag               5
#define ConfigCommand_right_kd_tag               6
#define ConfigCommand_cross_kp_tag               7
#define ConfigCommand_cross_ki_tag               8
#define ConfigCommand_cross_kd_tag               9
#define ConfigCommand_baseline_tag               10
#define ConfigCommand_ticks_per_revolution_tag   11
#define ConfigCommand_right_wheel_circumference_tag 12
#define ConfigCommand_left_wheel_circumference_tag 13
#define StatusMessage_linear_velocity_tag        1
#define StatusMessage_angular_velocity_tag       2
#define StatusMessage_delta_millis_tag           3
#define StatusMessage_status_tag                 4
#define VelocityCommand_linear_velocity_tag      1
#define VelocityCommand_angular_velocity_tag     2

/* Struct field encoding specification for nanopb */
#define StatusMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    linear_velocity,   1) \
X(a, STATIC,   REQUIRED, FLOAT,    angular_velocity,   2) \
X(a, STATIC,   REQUIRED, FIXED32,  delta_millis,      3) \
X(a, STATIC,   REQUIRED, FIXED32,  status,            4)
#define StatusMessage_CALLBACK NULL
#define StatusMessage_DEFAULT NULL

#define ConfigCommand_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    left_kp,           1) \
X(a, STATIC,   REQUIRED, FLOAT,    left_ki,           2) \
X(a, STATIC,   REQUIRED, FLOAT,    left_kd,           3) \
X(a, STATIC,   REQUIRED, FLOAT,    right_kp,          4) \
X(a, STATIC,   REQUIRED, FLOAT,    right_ki,          5) \
X(a, STATIC,   REQUIRED, FLOAT,    right_kd,          6) \
X(a, STATIC,   REQUIRED, FLOAT,    cross_kp,          7) \
X(a, STATIC,   REQUIRED, FLOAT,    cross_ki,          8) \
X(a, STATIC,   REQUIRED, FLOAT,    cross_kd,          9) \
X(a, STATIC,   REQUIRED, FLOAT,    baseline,         10) \
X(a, STATIC,   REQUIRED, FIXED32,  ticks_per_revolution,  11) \
X(a, STATIC,   REQUIRED, FLOAT,    right_wheel_circumference,  12) \
X(a, STATIC,   REQUIRED, FLOAT,    left_wheel_circumference,  13)
#define ConfigCommand_CALLBACK NULL
#define ConfigCommand_DEFAULT NULL

#define VelocityCommand_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    linear_velocity,   1) \
X(a, STATIC,   REQUIRED, FLOAT,    angular_velocity,   2)
#define VelocityCommand_CALLBACK NULL
#define VelocityCommand_DEFAULT NULL

extern const pb_msgdesc_t StatusMessage_msg;
extern const pb_msgdesc_t ConfigCommand_msg;
extern const pb_msgdesc_t VelocityCommand_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define StatusMessage_fields &StatusMessage_msg
#define ConfigCommand_fields &ConfigCommand_msg
#define VelocityCommand_fields &VelocityCommand_msg

/* Maximum encoded size of messages (where known) */
#define StatusMessage_size                       20
#define ConfigCommand_size                       65
#define VelocityCommand_size                     10

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
